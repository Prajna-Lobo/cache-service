// Code generated by MockGen. DO NOT EDIT.
// Source: service/cache_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "cache-service/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCacheService is a mock of CacheService interface
type MockCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServiceMockRecorder
}

// MockCacheServiceMockRecorder is the mock recorder for MockCacheService
type MockCacheServiceMockRecorder struct {
	mock *MockCacheService
}

// NewMockCacheService creates a new mock instance
func NewMockCacheService(ctrl *gomock.Controller) *MockCacheService {
	mock := &MockCacheService{ctrl: ctrl}
	mock.recorder = &MockCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheService) EXPECT() *MockCacheServiceMockRecorder {
	return m.recorder
}

// StoreData mocks base method
func (m *MockCacheService) StoreData(data model.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreData", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreData indicates an expected call of StoreData
func (mr *MockCacheServiceMockRecorder) StoreData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreData", reflect.TypeOf((*MockCacheService)(nil).StoreData), data)
}

// FetchFromCache mocks base method
func (m *MockCacheService) FetchFromCache(pagination model.Pagination) (model.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFromCache", pagination)
	ret0, _ := ret[0].(model.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFromCache indicates an expected call of FetchFromCache
func (mr *MockCacheServiceMockRecorder) FetchFromCache(pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFromCache", reflect.TypeOf((*MockCacheService)(nil).FetchFromCache), pagination)
}
